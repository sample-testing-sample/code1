{
  "version": 3,
  "sources": ["../../../../src/lib/shapes/arrow/ArrowShapeUtil.tsx"],
  "sourcesContent": ["import {\n\tArc2d,\n\tBox,\n\tEdge2d,\n\tEditor,\n\tGeometry2d,\n\tGroup2d,\n\tRectangle2d,\n\tSVGContainer,\n\tShapeUtil,\n\tSvgExportContext,\n\tTLArrowShape,\n\tTLArrowShapeProps,\n\tTLHandle,\n\tTLOnEditEndHandler,\n\tTLOnHandleDragHandler,\n\tTLOnResizeHandler,\n\tTLOnTranslateHandler,\n\tTLOnTranslateStartHandler,\n\tTLShapePartial,\n\tTLShapeUtilCanvasSvgDef,\n\tTLShapeUtilFlag,\n\tVec,\n\tarrowShapeMigrations,\n\tarrowShapeProps,\n\tgetArrowTerminalsInArrowSpace,\n\tgetDefaultColorTheme,\n\tmapObjectMapValues,\n\tobjectMapEntries,\n\tstructuredClone,\n\ttoDomPrecision,\n\ttrack,\n\tuseEditor,\n\tuseIsEditing,\n} from '@tldraw/editor'\nimport React from 'react'\nimport { ShapeFill, useDefaultColorTheme } from '../shared/ShapeFill'\nimport { SvgTextLabel } from '../shared/SvgTextLabel'\nimport { ARROW_LABEL_FONT_SIZES, STROKE_SIZES } from '../shared/default-shape-constants'\nimport {\n\tgetFillDefForCanvas,\n\tgetFillDefForExport,\n\tgetFontDefForExport,\n} from '../shared/defaultStyleDefs'\nimport { getPerfectDashProps } from '../shared/getPerfectDashProps'\nimport { getArrowLabelPosition } from './arrowLabel'\nimport { getArrowheadPathForType } from './arrowheads'\nimport {\n\tgetCurvedArrowHandlePath,\n\tgetSolidCurvedArrowPath,\n\tgetSolidStraightArrowPath,\n\tgetStraightArrowHandlePath,\n} from './arrowpaths'\nimport { ArrowTextLabel } from './components/ArrowTextLabel'\n\nlet globalRenderIndex = 0\n\nenum ARROW_HANDLES {\n\tSTART = 'start',\n\tMIDDLE = 'middle',\n\tEND = 'end',\n}\n\n/** @public */\nexport class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {\n\tstatic override type = 'arrow' as const\n\tstatic override props = arrowShapeProps\n\tstatic override migrations = arrowShapeMigrations\n\n\toverride canEdit = () => true\n\toverride canBind = () => false\n\toverride canSnap = () => false\n\toverride hideResizeHandles: TLShapeUtilFlag<TLArrowShape> = () => true\n\toverride hideRotateHandle: TLShapeUtilFlag<TLArrowShape> = () => true\n\toverride hideSelectionBoundsBg: TLShapeUtilFlag<TLArrowShape> = () => true\n\toverride hideSelectionBoundsFg: TLShapeUtilFlag<TLArrowShape> = () => true\n\n\toverride getDefaultProps(): TLArrowShape['props'] {\n\t\treturn {\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tfill: 'none',\n\t\t\tcolor: 'black',\n\t\t\tlabelColor: 'black',\n\t\t\tbend: 0,\n\t\t\tstart: { type: 'point', x: 0, y: 0 },\n\t\t\tend: { type: 'point', x: 2, y: 0 },\n\t\t\tarrowheadStart: 'none',\n\t\t\tarrowheadEnd: 'arrow',\n\t\t\ttext: '',\n\t\t\tlabelPosition: 0.5,\n\t\t\tfont: 'draw',\n\t\t}\n\t}\n\n\tgetGeometry(shape: TLArrowShape) {\n\t\tconst info = this.editor.getArrowInfo(shape)!\n\n\t\tconst debugGeom: Geometry2d[] = []\n\n\t\tconst bodyGeom = info.isStraight\n\t\t\t? new Edge2d({\n\t\t\t\t\tstart: Vec.From(info.start.point),\n\t\t\t\t\tend: Vec.From(info.end.point),\n\t\t\t\t})\n\t\t\t: new Arc2d({\n\t\t\t\t\tcenter: Vec.Cast(info.handleArc.center),\n\t\t\t\t\tradius: info.handleArc.radius,\n\t\t\t\t\tstart: Vec.Cast(info.start.point),\n\t\t\t\t\tend: Vec.Cast(info.end.point),\n\t\t\t\t\tsweepFlag: info.bodyArc.sweepFlag,\n\t\t\t\t\tlargeArcFlag: info.bodyArc.largeArcFlag,\n\t\t\t\t})\n\n\t\tlet labelGeom\n\t\tif (shape.props.text.trim()) {\n\t\t\tconst labelPosition = getArrowLabelPosition(this.editor, shape)\n\t\t\tdebugGeom.push(...labelPosition.debugGeom)\n\t\t\tlabelGeom = new Rectangle2d({\n\t\t\t\tx: labelPosition.box.x,\n\t\t\t\ty: labelPosition.box.y,\n\t\t\t\twidth: labelPosition.box.w,\n\t\t\t\theight: labelPosition.box.h,\n\t\t\t\tisFilled: true,\n\t\t\t\tisLabel: true,\n\t\t\t})\n\t\t}\n\n\t\treturn new Group2d({\n\t\t\tchildren: [...(labelGeom ? [bodyGeom, labelGeom] : [bodyGeom]), ...debugGeom],\n\t\t})\n\t}\n\n\toverride getHandles(shape: TLArrowShape): TLHandle[] {\n\t\tconst info = this.editor.getArrowInfo(shape)!\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tid: ARROW_HANDLES.START,\n\t\t\t\ttype: 'vertex',\n\t\t\t\tindex: 'a0',\n\t\t\t\tx: info.start.handle.x,\n\t\t\t\ty: info.start.handle.y,\n\t\t\t\tcanBind: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: ARROW_HANDLES.MIDDLE,\n\t\t\t\ttype: 'virtual',\n\t\t\t\tindex: 'a2',\n\t\t\t\tx: info.middle.x,\n\t\t\t\ty: info.middle.y,\n\t\t\t\tcanBind: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: ARROW_HANDLES.END,\n\t\t\t\ttype: 'vertex',\n\t\t\t\tindex: 'a3',\n\t\t\t\tx: info.end.handle.x,\n\t\t\t\ty: info.end.handle.y,\n\t\t\t\tcanBind: true,\n\t\t\t},\n\t\t].filter(Boolean) as TLHandle[]\n\t}\n\n\toverride onHandleDrag: TLOnHandleDragHandler<TLArrowShape> = (shape, { handle, isPrecise }) => {\n\t\tconst handleId = handle.id as ARROW_HANDLES\n\n\t\tif (handleId === ARROW_HANDLES.MIDDLE) {\n\t\t\t// Bending the arrow...\n\t\t\tconst { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape)\n\n\t\t\tconst delta = Vec.Sub(end, start)\n\t\t\tconst v = Vec.Per(delta)\n\n\t\t\tconst med = Vec.Med(end, start)\n\t\t\tconst A = Vec.Sub(med, v)\n\t\t\tconst B = Vec.Add(med, v)\n\n\t\t\tconst point = Vec.NearestPointOnLineSegment(A, B, handle, false)\n\t\t\tlet bend = Vec.Dist(point, med)\n\t\t\tif (Vec.Clockwise(point, end, med)) bend *= -1\n\t\t\treturn { id: shape.id, type: shape.type, props: { bend } }\n\t\t}\n\n\t\t// Start or end, pointing the arrow...\n\n\t\tconst next = structuredClone(shape) as TLArrowShape\n\n\t\tif (this.editor.inputs.ctrlKey) {\n\t\t\t// todo: maybe double check that this isn't equal to the other handle too?\n\t\t\t// Skip binding\n\t\t\tnext.props[handleId] = {\n\t\t\t\ttype: 'point',\n\t\t\t\tx: handle.x,\n\t\t\t\ty: handle.y,\n\t\t\t}\n\t\t\treturn next\n\t\t}\n\n\t\tconst point = this.editor.getShapePageTransform(shape.id)!.applyToPoint(handle)\n\n\t\tconst target = this.editor.getShapeAtPoint(point, {\n\t\t\thitInside: true,\n\t\t\thitFrameInside: true,\n\t\t\tmargin: 0,\n\t\t\tfilter: (targetShape) => {\n\t\t\t\treturn !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape)\n\t\t\t},\n\t\t})\n\n\t\tif (!target) {\n\t\t\t// todo: maybe double check that this isn't equal to the other handle too?\n\t\t\tnext.props[handleId] = {\n\t\t\t\ttype: 'point',\n\t\t\t\tx: handle.x,\n\t\t\t\ty: handle.y,\n\t\t\t}\n\t\t\treturn next\n\t\t}\n\n\t\t// we've got a target! the handle is being dragged over a shape, bind to it\n\n\t\tconst targetGeometry = this.editor.getShapeGeometry(target)\n\t\tconst targetBounds = Box.ZeroFix(targetGeometry.bounds)\n\t\tconst pageTransform = this.editor.getShapePageTransform(next.id)!\n\t\tconst pointInPageSpace = pageTransform.applyToPoint(handle)\n\t\tconst pointInTargetSpace = this.editor.getPointInShapeSpace(target, pointInPageSpace)\n\n\t\tlet precise = isPrecise\n\n\t\tif (!precise) {\n\t\t\t// If we're switching to a new bound shape, then precise only if moving slowly\n\t\t\tconst prevHandle = next.props[handleId]\n\t\t\tif (\n\t\t\t\tprevHandle.type === 'point' ||\n\t\t\t\t(prevHandle.type === 'binding' && target.id !== prevHandle.boundShapeId)\n\t\t\t) {\n\t\t\t\tprecise = this.editor.inputs.pointerVelocity.len() < 0.5\n\t\t\t}\n\t\t}\n\n\t\tif (!isPrecise) {\n\t\t\tif (!targetGeometry.isClosed) {\n\t\t\t\tprecise = true\n\t\t\t}\n\n\t\t\t// Double check that we're not going to be doing an imprecise snap on\n\t\t\t// the same shape twice, as this would result in a zero length line\n\t\t\tconst otherHandle =\n\t\t\t\tnext.props[handleId === ARROW_HANDLES.START ? ARROW_HANDLES.END : ARROW_HANDLES.START]\n\t\t\tif (\n\t\t\t\totherHandle.type === 'binding' &&\n\t\t\t\ttarget.id === otherHandle.boundShapeId &&\n\t\t\t\totherHandle.isPrecise\n\t\t\t) {\n\t\t\t\tprecise = true\n\t\t\t}\n\t\t}\n\n\t\tconst normalizedAnchor = {\n\t\t\tx: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,\n\t\t\ty: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,\n\t\t}\n\n\t\tif (precise) {\n\t\t\t// Turn off precision if we're within a certain distance to the center of the shape.\n\t\t\t// Funky math but we want the snap distance to be 4 at the minimum and either\n\t\t\t// 16 or 15% of the smaller dimension of the target shape, whichever is smaller\n\t\t\tif (\n\t\t\t\tVec.Dist(pointInTargetSpace, targetBounds.center) <\n\t\t\t\tMath.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /\n\t\t\t\t\tthis.editor.getZoomLevel()\n\t\t\t) {\n\t\t\t\tnormalizedAnchor.x = 0.5\n\t\t\t\tnormalizedAnchor.y = 0.5\n\t\t\t}\n\t\t}\n\n\t\tnext.props[handleId] = {\n\t\t\ttype: 'binding',\n\t\t\tboundShapeId: target.id,\n\t\t\tnormalizedAnchor: normalizedAnchor,\n\t\t\tisPrecise: precise,\n\t\t\tisExact: this.editor.inputs.altKey,\n\t\t}\n\n\t\tif (next.props.start.type === 'binding' && next.props.end.type === 'binding') {\n\t\t\tif (next.props.start.boundShapeId === next.props.end.boundShapeId) {\n\t\t\t\tif (Vec.Equals(next.props.start.normalizedAnchor, next.props.end.normalizedAnchor)) {\n\t\t\t\t\tnext.props.end.normalizedAnchor.x += 0.05\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn next\n\t}\n\n\toverride onTranslateStart: TLOnTranslateStartHandler<TLArrowShape> = (shape) => {\n\t\tconst startBindingId =\n\t\t\tshape.props.start.type === 'binding' ? shape.props.start.boundShapeId : null\n\t\tconst endBindingId = shape.props.end.type === 'binding' ? shape.props.end.boundShapeId : null\n\n\t\tconst terminalsInArrowSpace = getArrowTerminalsInArrowSpace(this.editor, shape)\n\t\tconst shapePageTransform = this.editor.getShapePageTransform(shape.id)!\n\n\t\t// If at least one bound shape is in the selection, do nothing;\n\t\t// If no bound shapes are in the selection, unbind any bound shapes\n\n\t\tconst selectedShapeIds = this.editor.getSelectedShapeIds()\n\t\tconst shapesToCheck = new Set<string>()\n\t\tif (startBindingId) {\n\t\t\t// Add shape and all ancestors to set\n\t\t\tshapesToCheck.add(startBindingId)\n\t\t\tthis.editor.getShapeAncestors(startBindingId).forEach((a) => shapesToCheck.add(a.id))\n\t\t}\n\t\tif (endBindingId) {\n\t\t\t// Add shape and all ancestors to set\n\t\t\tshapesToCheck.add(endBindingId)\n\t\t\tthis.editor.getShapeAncestors(endBindingId).forEach((a) => shapesToCheck.add(a.id))\n\t\t}\n\t\t// If any of the shapes are selected, return\n\t\tfor (const id of selectedShapeIds) {\n\t\t\tif (shapesToCheck.has(id)) return\n\t\t}\n\n\t\tlet result = shape\n\n\t\t// When we start translating shapes, record where their bindings were in page space so we\n\t\t// can maintain them as we translate the arrow\n\t\tshapeAtTranslationStart.set(shape, {\n\t\t\tpagePosition: shapePageTransform.applyToPoint(shape),\n\t\t\tterminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {\n\t\t\t\tconst terminal = shape.props[terminalName]\n\t\t\t\tif (terminal.type !== 'binding') return null\n\t\t\t\treturn {\n\t\t\t\t\tbinding: terminal,\n\t\t\t\t\tshapePosition: point,\n\t\t\t\t\tpagePosition: shapePageTransform.applyToPoint(point),\n\t\t\t\t}\n\t\t\t}),\n\t\t})\n\n\t\tfor (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {\n\t\t\tconst terminal = shape.props[handleName]\n\t\t\tif (terminal.type !== 'binding') continue\n\t\t\tresult = {\n\t\t\t\t...shape,\n\t\t\t\tprops: { ...shape.props, [handleName]: { ...terminal, isPrecise: true } },\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\toverride onTranslate?: TLOnTranslateHandler<TLArrowShape> = (initialShape, shape) => {\n\t\tconst atTranslationStart = shapeAtTranslationStart.get(initialShape)\n\t\tif (!atTranslationStart) return\n\n\t\tconst shapePageTransform = this.editor.getShapePageTransform(shape.id)!\n\t\tconst pageDelta = Vec.Sub(\n\t\t\tshapePageTransform.applyToPoint(shape),\n\t\t\tatTranslationStart.pagePosition\n\t\t)\n\n\t\tlet result = shape\n\t\tfor (const [terminalName, terminalBinding] of objectMapEntries(\n\t\t\tatTranslationStart.terminalBindings\n\t\t)) {\n\t\t\tif (!terminalBinding) continue\n\n\t\t\tconst newPagePoint = Vec.Add(terminalBinding.pagePosition, Vec.Mul(pageDelta, 0.5))\n\t\t\tconst newTarget = this.editor.getShapeAtPoint(newPagePoint, {\n\t\t\t\thitInside: true,\n\t\t\t\thitFrameInside: true,\n\t\t\t\tmargin: 0,\n\t\t\t\tfilter: (targetShape) => {\n\t\t\t\t\treturn !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape)\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (newTarget?.id === terminalBinding.binding.boundShapeId) {\n\t\t\t\tconst targetBounds = Box.ZeroFix(this.editor.getShapeGeometry(newTarget).bounds)\n\t\t\t\tconst pointInTargetSpace = this.editor.getPointInShapeSpace(newTarget, newPagePoint)\n\t\t\t\tconst normalizedAnchor = {\n\t\t\t\t\tx: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,\n\t\t\t\t\ty: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,\n\t\t\t\t}\n\t\t\t\tresult = {\n\t\t\t\t\t...result,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...result.props,\n\t\t\t\t\t\t[terminalName]: { ...terminalBinding.binding, isPrecise: true, normalizedAnchor },\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = {\n\t\t\t\t\t...result,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...result.props,\n\t\t\t\t\t\t[terminalName]: {\n\t\t\t\t\t\t\ttype: 'point',\n\t\t\t\t\t\t\tx: terminalBinding.shapePosition.x,\n\t\t\t\t\t\t\ty: terminalBinding.shapePosition.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\toverride onResize: TLOnResizeHandler<TLArrowShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst terminals = getArrowTerminalsInArrowSpace(this.editor, shape)\n\n\t\tconst { start, end } = structuredClone<TLArrowShape['props']>(shape.props)\n\t\tlet { bend } = shape.props\n\n\t\t// Rescale start handle if it's not bound to a shape\n\t\tif (start.type === 'point') {\n\t\t\tstart.x = terminals.start.x * scaleX\n\t\t\tstart.y = terminals.start.y * scaleY\n\t\t}\n\n\t\t// Rescale end handle if it's not bound to a shape\n\t\tif (end.type === 'point') {\n\t\t\tend.x = terminals.end.x * scaleX\n\t\t\tend.y = terminals.end.y * scaleY\n\t\t}\n\n\t\t// todo: we should only change the normalized anchor positions\n\t\t// of the shape's handles if the bound shape is also being resized\n\n\t\tconst mx = Math.abs(scaleX)\n\t\tconst my = Math.abs(scaleY)\n\n\t\tif (scaleX < 0 && scaleY >= 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= -1\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\n\t\t\tif (start.type === 'binding') {\n\t\t\t\tstart.normalizedAnchor.x = 1 - start.normalizedAnchor.x\n\t\t\t}\n\n\t\t\tif (end.type === 'binding') {\n\t\t\t\tend.normalizedAnchor.x = 1 - end.normalizedAnchor.x\n\t\t\t}\n\t\t} else if (scaleX >= 0 && scaleY < 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= -1\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\n\t\t\tif (start.type === 'binding') {\n\t\t\t\tstart.normalizedAnchor.y = 1 - start.normalizedAnchor.y\n\t\t\t}\n\n\t\t\tif (end.type === 'binding') {\n\t\t\t\tend.normalizedAnchor.y = 1 - end.normalizedAnchor.y\n\t\t\t}\n\t\t} else if (scaleX >= 0 && scaleY >= 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\t\t} else if (scaleX < 0 && scaleY < 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\n\t\t\tif (start.type === 'binding') {\n\t\t\t\tstart.normalizedAnchor.x = 1 - start.normalizedAnchor.x\n\t\t\t\tstart.normalizedAnchor.y = 1 - start.normalizedAnchor.y\n\t\t\t}\n\n\t\t\tif (end.type === 'binding') {\n\t\t\t\tend.normalizedAnchor.x = 1 - end.normalizedAnchor.x\n\t\t\t\tend.normalizedAnchor.y = 1 - end.normalizedAnchor.y\n\t\t\t}\n\t\t}\n\n\t\tconst next = {\n\t\t\tprops: {\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tbend,\n\t\t\t},\n\t\t}\n\n\t\treturn next\n\t}\n\n\toverride onDoubleClickHandle = (\n\t\tshape: TLArrowShape,\n\t\thandle: TLHandle\n\t): TLShapePartial<TLArrowShape> | void => {\n\t\tswitch (handle.id) {\n\t\t\tcase ARROW_HANDLES.START: {\n\t\t\t\treturn {\n\t\t\t\t\tid: shape.id,\n\t\t\t\t\ttype: shape.type,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...shape.props,\n\t\t\t\t\t\tarrowheadStart: shape.props.arrowheadStart === 'none' ? 'arrow' : 'none',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase ARROW_HANDLES.END: {\n\t\t\t\treturn {\n\t\t\t\t\tid: shape.id,\n\t\t\t\t\ttype: shape.type,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...shape.props,\n\t\t\t\t\t\tarrowheadEnd: shape.props.arrowheadEnd === 'none' ? 'arrow' : 'none',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponent(shape: TLArrowShape) {\n\t\tconst onlySelectedShape = this.editor.getOnlySelectedShape()\n\t\tconst shouldDisplayHandles =\n\t\t\tthis.editor.isInAny(\n\t\t\t\t'select.idle',\n\t\t\t\t'select.pointing_handle',\n\t\t\t\t'select.dragging_handle',\n\t\t\t\t'select.translating',\n\t\t\t\t'arrow.dragging'\n\t\t\t) && !this.editor.getInstanceState().isReadonly\n\n\t\tconst info = this.editor.getArrowInfo(shape)\n\t\tif (!info?.isValid) return null\n\n\t\tconst labelPosition = getArrowLabelPosition(this.editor, shape)\n\t\tconst isSelected = shape.id === this.editor.getOnlySelectedShapeId()\n\t\tconst isEditing = this.editor.getEditingShapeId() === shape.id\n\t\tconst showArrowLabel = isEditing || shape.props.text\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<SVGContainer id={shape.id} style={{ minWidth: 50, minHeight: 50 }}>\n\t\t\t\t\t<ArrowSvg\n\t\t\t\t\t\tshape={shape}\n\t\t\t\t\t\tshouldDisplayHandles={shouldDisplayHandles && onlySelectedShape === shape}\n\t\t\t\t\t/>\n\t\t\t\t</SVGContainer>\n\t\t\t\t{showArrowLabel && (\n\t\t\t\t\t<ArrowTextLabel\n\t\t\t\t\t\tid={shape.id}\n\t\t\t\t\t\ttext={shape.props.text}\n\t\t\t\t\t\tfont={shape.props.font}\n\t\t\t\t\t\tsize={shape.props.size}\n\t\t\t\t\t\tposition={labelPosition.box.center}\n\t\t\t\t\t\twidth={labelPosition.box.w}\n\t\t\t\t\t\tisSelected={isSelected}\n\t\t\t\t\t\tlabelColor={shape.props.labelColor}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t}\n\n\tindicator(shape: TLArrowShape) {\n\t\tconst { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape)\n\n\t\tconst info = this.editor.getArrowInfo(shape)\n\t\tconst geometry = this.editor.getShapeGeometry<Group2d>(shape)\n\t\tconst bounds = geometry.bounds\n\n\t\tconst labelGeometry = shape.props.text.trim() ? (geometry.children[1] as Rectangle2d) : null\n\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tconst isEditing = useIsEditing(shape.id)\n\n\t\tif (!info) return null\n\t\tif (Vec.Equals(start, end)) return null\n\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\t\tconst as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)\n\t\tconst ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)\n\n\t\tconst path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)\n\n\t\tconst includeMask =\n\t\t\t(as && info.start.arrowhead !== 'arrow') ||\n\t\t\t(ae && info.end.arrowhead !== 'arrow') ||\n\t\t\t!!labelGeometry\n\n\t\tconst maskId = (shape.id + '_clip').replace(':', '_')\n\n\t\tif (isEditing && labelGeometry) {\n\t\t\treturn (\n\t\t\t\t<rect\n\t\t\t\t\tx={toDomPrecision(labelGeometry.x)}\n\t\t\t\t\ty={toDomPrecision(labelGeometry.y)}\n\t\t\t\t\twidth={labelGeometry.w}\n\t\t\t\t\theight={labelGeometry.h}\n\t\t\t\t\trx={3.5}\n\t\t\t\t\try={3.5}\n\t\t\t\t/>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t{includeMask && (\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<mask id={maskId}>\n\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\tx={bounds.minX - 100}\n\t\t\t\t\t\t\t\ty={bounds.minY - 100}\n\t\t\t\t\t\t\t\twidth={bounds.w + 200}\n\t\t\t\t\t\t\t\theight={bounds.h + 200}\n\t\t\t\t\t\t\t\tfill=\"white\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{labelGeometry && (\n\t\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\t\tx={toDomPrecision(labelGeometry.x)}\n\t\t\t\t\t\t\t\t\ty={toDomPrecision(labelGeometry.y)}\n\t\t\t\t\t\t\t\t\twidth={labelGeometry.w}\n\t\t\t\t\t\t\t\t\theight={labelGeometry.h}\n\t\t\t\t\t\t\t\t\tfill=\"black\"\n\t\t\t\t\t\t\t\t\trx={3.5}\n\t\t\t\t\t\t\t\t\try={3.5}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{as && (\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td={as}\n\t\t\t\t\t\t\t\t\tfill={info.start.arrowhead === 'arrow' ? 'none' : 'black'}\n\t\t\t\t\t\t\t\t\tstroke=\"none\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{ae && (\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td={ae}\n\t\t\t\t\t\t\t\t\tfill={info.end.arrowhead === 'arrow' ? 'none' : 'black'}\n\t\t\t\t\t\t\t\t\tstroke=\"none\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</mask>\n\t\t\t\t\t</defs>\n\t\t\t\t)}\n\t\t\t\t{/* firefox will clip if you provide a maskURL even if there is no mask matching that URL in the DOM */}\n\t\t\t\t<g {...(includeMask ? { mask: `url(#${maskId})` } : undefined)}>\n\t\t\t\t\t{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}\n\t\t\t\t\t{includeMask && (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tx={bounds.minX - 100}\n\t\t\t\t\t\t\ty={bounds.minY - 100}\n\t\t\t\t\t\t\twidth={bounds.width + 200}\n\t\t\t\t\t\t\theight={bounds.height + 200}\n\t\t\t\t\t\t\topacity={0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<path d={path} />\n\t\t\t\t</g>\n\t\t\t\t{as && <path d={as} />}\n\t\t\t\t{ae && <path d={ae} />}\n\t\t\t\t{labelGeometry && (\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={toDomPrecision(labelGeometry.x)}\n\t\t\t\t\t\ty={toDomPrecision(labelGeometry.y)}\n\t\t\t\t\t\twidth={labelGeometry.w}\n\t\t\t\t\t\theight={labelGeometry.h}\n\t\t\t\t\t\trx={3.5}\n\t\t\t\t\t\try={3.5}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</g>\n\t\t)\n\t}\n\n\toverride onEditEnd: TLOnEditEndHandler<TLArrowShape> = (shape) => {\n\t\tconst {\n\t\t\tid,\n\t\t\ttype,\n\t\t\tprops: { text },\n\t\t} = shape\n\n\t\tif (text.trimEnd() !== shape.props.text) {\n\t\t\tthis.editor.updateShapes<TLArrowShape>([\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\ttype,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\ttext: text.trimEnd(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t}\n\t}\n\n\toverride toSvg(shape: TLArrowShape, ctx: SvgExportContext) {\n\t\tctx.addExportDef(getFillDefForExport(shape.props.fill))\n\t\tif (shape.props.text) ctx.addExportDef(getFontDefForExport(shape.props.font))\n\t\tconst theme = getDefaultColorTheme(ctx)\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<ArrowSvg shape={shape} shouldDisplayHandles={false} />\n\t\t\t\t<SvgTextLabel\n\t\t\t\t\tfontSize={ARROW_LABEL_FONT_SIZES[shape.props.size]}\n\t\t\t\t\tfont={shape.props.font}\n\t\t\t\t\talign=\"middle\"\n\t\t\t\t\tverticalAlign=\"middle\"\n\t\t\t\t\ttext={shape.props.text}\n\t\t\t\t\tlabelColor={theme[shape.props.labelColor].solid}\n\t\t\t\t\tbounds={getArrowLabelPosition(this.editor, shape).box}\n\t\t\t\t\tpadding={4}\n\t\t\t\t/>\n\t\t\t</>\n\t\t)\n\t}\n\n\toverride getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {\n\t\treturn [\n\t\t\tgetFillDefForCanvas(),\n\t\t\t{\n\t\t\t\tkey: `arrow:dot`,\n\t\t\t\tcomponent: ArrowheadDotDef,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: `arrow:cross`,\n\t\t\t\tcomponent: ArrowheadCrossDef,\n\t\t\t},\n\t\t]\n\t}\n}\n\nfunction getLength(editor: Editor, shape: TLArrowShape): number {\n\tconst info = editor.getArrowInfo(shape)!\n\n\treturn info.isStraight\n\t\t? Vec.Dist(info.start.handle, info.end.handle)\n\t\t: Math.abs(info.handleArc.length)\n}\n\nconst ArrowSvg = track(function ArrowSvg({\n\tshape,\n\tshouldDisplayHandles,\n}: {\n\tshape: TLArrowShape\n\tshouldDisplayHandles: boolean\n}) {\n\tconst editor = useEditor()\n\tconst theme = useDefaultColorTheme()\n\tconst info = editor.getArrowInfo(shape)\n\tconst bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)\n\n\tconst changeIndex = React.useMemo<number>(() => {\n\t\treturn editor.environment.isSafari ? (globalRenderIndex += 1) : 0\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [shape])\n\n\tif (!info?.isValid) return null\n\n\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\tconst as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)\n\tconst ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)\n\n\tconst path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)\n\n\tlet handlePath: null | React.JSX.Element = null\n\n\tif (shouldDisplayHandles) {\n\t\tconst sw = 2\n\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\tgetLength(editor, shape),\n\t\t\tsw,\n\t\t\t{\n\t\t\t\tend: 'skip',\n\t\t\t\tstart: 'skip',\n\t\t\t\tlengthRatio: 2.5,\n\t\t\t}\n\t\t)\n\n\t\thandlePath =\n\t\t\tshape.props.start.type === 'binding' || shape.props.end.type === 'binding' ? (\n\t\t\t\t<path\n\t\t\t\t\tclassName=\"tl-arrow-hint\"\n\t\t\t\t\td={info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info)}\n\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\tstrokeWidth={sw}\n\t\t\t\t\tmarkerStart={\n\t\t\t\t\t\tshape.props.start.type === 'binding'\n\t\t\t\t\t\t\t? shape.props.start.isExact\n\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t: shape.props.start.isPrecise\n\t\t\t\t\t\t\t\t\t? 'url(#arrowhead-cross)'\n\t\t\t\t\t\t\t\t\t: 'url(#arrowhead-dot)'\n\t\t\t\t\t\t\t: ''\n\t\t\t\t\t}\n\t\t\t\t\tmarkerEnd={\n\t\t\t\t\t\tshape.props.end.type === 'binding'\n\t\t\t\t\t\t\t? shape.props.end.isExact\n\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t: shape.props.end.isPrecise\n\t\t\t\t\t\t\t\t\t? 'url(#arrowhead-cross)'\n\t\t\t\t\t\t\t\t\t: 'url(#arrowhead-dot)'\n\t\t\t\t\t\t\t: ''\n\t\t\t\t\t}\n\t\t\t\t\topacity={0.16}\n\t\t\t\t/>\n\t\t\t) : null\n\t}\n\n\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\tinfo.isStraight ? info.length : Math.abs(info.bodyArc.length),\n\t\tstrokeWidth,\n\t\t{\n\t\t\tstyle: shape.props.dash,\n\t\t}\n\t)\n\n\tconst labelPosition = getArrowLabelPosition(editor, shape)\n\n\tconst maskStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')\n\tconst maskEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')\n\n\t// NOTE: I know right setting `changeIndex` hacky-as right! But we need this because otherwise safari loses\n\t// the mask, see <https://linear.app/tldraw/issue/TLD-1500/changing-arrow-color-makes-line-pass-through-text>\n\tconst maskId = (shape.id + '_clip_' + changeIndex).replace(':', '_')\n\n\treturn (\n\t\t<>\n\t\t\t{/* Yep */}\n\t\t\t<defs>\n\t\t\t\t<mask id={maskId}>\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={toDomPrecision(-100 + bounds.minX)}\n\t\t\t\t\t\ty={toDomPrecision(-100 + bounds.minY)}\n\t\t\t\t\t\twidth={toDomPrecision(bounds.width + 200)}\n\t\t\t\t\t\theight={toDomPrecision(bounds.height + 200)}\n\t\t\t\t\t\tfill=\"white\"\n\t\t\t\t\t/>\n\t\t\t\t\t{shape.props.text.trim() && (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tx={labelPosition.box.x}\n\t\t\t\t\t\t\ty={labelPosition.box.y}\n\t\t\t\t\t\t\twidth={labelPosition.box.w}\n\t\t\t\t\t\t\theight={labelPosition.box.h}\n\t\t\t\t\t\t\tfill=\"black\"\n\t\t\t\t\t\t\trx={4}\n\t\t\t\t\t\t\try={4}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t{as && maskStartArrowhead && (\n\t\t\t\t\t\t<path d={as} fill={info.start.arrowhead === 'arrow' ? 'none' : 'black'} stroke=\"none\" />\n\t\t\t\t\t)}\n\t\t\t\t\t{ae && maskEndArrowhead && (\n\t\t\t\t\t\t<path d={ae} fill={info.end.arrowhead === 'arrow' ? 'none' : 'black'} stroke=\"none\" />\n\t\t\t\t\t)}\n\t\t\t\t</mask>\n\t\t\t</defs>\n\t\t\t<g\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke={theme[shape.props.color].solid}\n\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tpointerEvents=\"none\"\n\t\t\t>\n\t\t\t\t{handlePath}\n\t\t\t\t{/* firefox will clip if you provide a maskURL even if there is no mask matching that URL in the DOM */}\n\t\t\t\t<g mask={`url(#${maskId})`}>\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={toDomPrecision(bounds.minX - 100)}\n\t\t\t\t\t\ty={toDomPrecision(bounds.minY - 100)}\n\t\t\t\t\t\twidth={toDomPrecision(bounds.width + 200)}\n\t\t\t\t\t\theight={toDomPrecision(bounds.height + 200)}\n\t\t\t\t\t\topacity={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<path d={path} strokeDasharray={strokeDasharray} strokeDashoffset={strokeDashoffset} />\n\t\t\t\t</g>\n\t\t\t\t{as && maskStartArrowhead && shape.props.fill !== 'none' && (\n\t\t\t\t\t<ShapeFill theme={theme} d={as} color={shape.props.color} fill={shape.props.fill} />\n\t\t\t\t)}\n\t\t\t\t{ae && maskEndArrowhead && shape.props.fill !== 'none' && (\n\t\t\t\t\t<ShapeFill theme={theme} d={ae} color={shape.props.color} fill={shape.props.fill} />\n\t\t\t\t)}\n\t\t\t\t{as && <path d={as} />}\n\t\t\t\t{ae && <path d={ae} />}\n\t\t\t</g>\n\t\t</>\n\t)\n})\n\nconst shapeAtTranslationStart = new WeakMap<\n\tTLArrowShape,\n\t{\n\t\tpagePosition: Vec\n\t\tterminalBindings: Record<\n\t\t\t'start' | 'end',\n\t\t\t{\n\t\t\t\tpagePosition: Vec\n\t\t\t\tshapePosition: Vec\n\t\t\t\tbinding: Extract<TLArrowShapeProps['start'], { type: 'binding' }>\n\t\t\t} | null\n\t\t>\n\t}\n>()\n\nfunction ArrowheadDotDef() {\n\treturn (\n\t\t<marker id=\"arrowhead-dot\" className=\"tl-arrow-hint\" refX=\"3.0\" refY=\"3.0\" orient=\"0\">\n\t\t\t<circle cx=\"3\" cy=\"3\" r=\"2\" strokeDasharray=\"100%\" />\n\t\t</marker>\n\t)\n}\n\nfunction ArrowheadCrossDef() {\n\treturn (\n\t\t<marker id=\"arrowhead-cross\" className=\"tl-arrow-hint\" refX=\"3.0\" refY=\"3.0\" orient=\"auto\">\n\t\t\t<line x1=\"1.5\" y1=\"1.5\" x2=\"4.5\" y2=\"4.5\" strokeDasharray=\"100%\" />\n\t\t\t<line x1=\"1.5\" y1=\"4.5\" x2=\"4.5\" y2=\"1.5\" strokeDasharray=\"100%\" />\n\t\t</marker>\n\t)\n}\n"],
  "mappings": "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",
  "names": ["ARROW_HANDLES", "point", "ArrowSvg", "React", "strokeDasharray", "strokeDashoffset"]
}
