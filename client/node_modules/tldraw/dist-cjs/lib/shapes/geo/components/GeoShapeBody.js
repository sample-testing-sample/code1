"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GeoShapeBody_exports = {};
__export(GeoShapeBody_exports, {
  GeoShapeBody: () => GeoShapeBody
});
module.exports = __toCommonJS(GeoShapeBody_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_editor = require("@tldraw/editor");
var import_default_shape_constants = require("../../shared/default-shape-constants");
var import_getLines = require("../getLines");
var import_DashStyleCloud = require("./DashStyleCloud");
var import_DashStyleEllipse = require("./DashStyleEllipse");
var import_DashStyleOval = require("./DashStyleOval");
var import_DashStylePolygon = require("./DashStylePolygon");
var import_DrawStyleCloud = require("./DrawStyleCloud");
var import_DrawStylePolygon = require("./DrawStylePolygon");
var import_SolidStyleCloud = require("./SolidStyleCloud");
var import_SolidStyleEllipse = require("./SolidStyleEllipse");
var import_SolidStyleOval = require("./SolidStyleOval");
var import_SolidStylePolygon = require("./SolidStylePolygon");
function GeoShapeBody({ shape }) {
  const editor = (0, import_editor.useEditor)();
  const { id, props } = shape;
  const { w, color, fill, dash, growY, size } = props;
  const strokeWidth = import_default_shape_constants.STROKE_SIZES[size];
  const h = props.h + growY;
  switch (props.geo) {
    case "cloud": {
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_SolidStyleCloud.SolidStyleCloud,
          {
            color,
            fill,
            strokeWidth,
            w,
            h,
            id,
            size
          }
        );
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_DashStyleCloud.DashStyleCloud,
          {
            color,
            fill,
            strokeWidth,
            w,
            h,
            id,
            size,
            dash
          }
        );
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_DrawStyleCloud.DrawStyleCloud,
          {
            color,
            fill,
            strokeWidth,
            w,
            h,
            id,
            size
          }
        );
      }
      break;
    }
    case "ellipse": {
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_SolidStyleEllipse.SolidStyleEllipse, { strokeWidth, w, h, color, fill });
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_DashStyleEllipse.DashStyleEllipse,
          {
            id,
            strokeWidth,
            w,
            h,
            dash,
            color,
            fill
          }
        );
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_SolidStyleEllipse.SolidStyleEllipse, { strokeWidth, w, h, color, fill });
      }
      break;
    }
    case "oval": {
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_SolidStyleOval.SolidStyleOval, { strokeWidth, w, h, color, fill });
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_DashStyleOval.DashStyleOval,
          {
            id,
            strokeWidth,
            w,
            h,
            dash,
            color,
            fill
          }
        );
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_SolidStyleOval.SolidStyleOval, { strokeWidth, w, h, color, fill });
      }
      break;
    }
    default: {
      const geometry = editor.getShapeGeometry(shape);
      const outline = geometry instanceof import_editor.Group2d ? geometry.children[0].vertices : geometry.vertices;
      const lines = (0, import_getLines.getLines)(shape.props, strokeWidth);
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_SolidStylePolygon.SolidStylePolygon,
          {
            fill,
            color,
            strokeWidth,
            outline,
            lines
          }
        );
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_DashStylePolygon.DashStylePolygon,
          {
            dash,
            fill,
            color,
            strokeWidth,
            outline,
            lines
          }
        );
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_DrawStylePolygon.DrawStylePolygon,
          {
            id,
            fill,
            color,
            strokeWidth,
            outline,
            lines
          }
        );
      }
    }
  }
}
//# sourceMappingURL=GeoShapeBody.js.map
