"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DrawStyleEllipse_exports = {};
__export(DrawStyleEllipse_exports, {
  getEllipseIndicatorPath: () => getEllipseIndicatorPath
});
module.exports = __toCommonJS(DrawStyleEllipse_exports);
var import_editor = require("@tldraw/editor");
var import_getStrokePoints = require("../../shared/freehand/getStrokePoints");
var import_svg = require("../../shared/freehand/svg");
function getEllipseStrokeOptions(strokeWidth) {
  return {
    size: 1 + strokeWidth,
    thinning: 0.25,
    end: { taper: strokeWidth },
    start: { taper: strokeWidth },
    streamline: 0,
    smoothing: 1,
    simulatePressure: false
  };
}
function getEllipseStrokePoints(id, width, height, strokeWidth) {
  const getRandom = (0, import_editor.rng)(id);
  const rx = width / 2;
  const ry = height / 2;
  const perimeter = (0, import_editor.perimeterOfEllipse)(rx, ry);
  const points = [];
  const start = import_editor.PI2 * getRandom();
  const length = import_editor.PI2 + import_editor.HALF_PI / 2 + Math.abs(getRandom()) * import_editor.HALF_PI;
  const count = Math.max(16, perimeter / 10);
  for (let i = 0; i < count; i++) {
    const t = i / (count - 1);
    const r = start + t * length;
    const c = Math.cos(r);
    const s = Math.sin(r);
    points.push(
      new import_editor.Vec(
        rx * c + width * 0.5 + 0.05 * getRandom(),
        ry * s + height / 2 + 0.05 * getRandom(),
        Math.min(
          1,
          0.5 + Math.abs(0.5 - (getRandom() > 0 ? import_editor.EASINGS.easeInOutSine(t) : import_editor.EASINGS.easeInExpo(t))) / 2
        )
      )
    );
  }
  return (0, import_getStrokePoints.getStrokePoints)(points, getEllipseStrokeOptions(strokeWidth));
}
function getEllipseIndicatorPath(id, width, height, strokeWidth) {
  return (0, import_svg.getSvgPathFromStrokePoints)(getEllipseStrokePoints(id, width, height, strokeWidth));
}
//# sourceMappingURL=DrawStyleEllipse.js.map
