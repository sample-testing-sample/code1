{
  "version": 3,
  "sources": ["../../../../../src/lib/shapes/geo/components/DashStyleCloud.tsx"],
  "sourcesContent": ["import { TLGeoShape, TLShapeId, Vec, canonicalizeRotation } from '@tldraw/editor'\nimport * as React from 'react'\nimport { ShapeFill, useDefaultColorTheme } from '../../shared/ShapeFill'\nimport { getPerfectDashProps } from '../../shared/getPerfectDashProps'\nimport { cloudSvgPath, getCloudArcs } from '../cloudOutline'\n\nexport const DashStyleCloud = React.memo(function DashStylePolygon({\n\tdash,\n\tfill,\n\tcolor,\n\tstrokeWidth,\n\tw,\n\th,\n\tid,\n\tsize,\n}: Pick<TLGeoShape['props'], 'dash' | 'fill' | 'color' | 'w' | 'h' | 'size'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n}) {\n\tconst theme = useDefaultColorTheme()\n\tconst innerPath = cloudSvgPath(w, h, id, size)\n\tconst arcs = getCloudArcs(w, h, id, size)\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill theme={theme} d={innerPath} fill={fill} color={color} />\n\t\t\t<g strokeWidth={strokeWidth} stroke={theme[color].solid} fill=\"none\" pointerEvents=\"all\">\n\t\t\t\t{arcs.map(({ leftPoint, rightPoint, center, radius }, i) => {\n\t\t\t\t\tconst arcLength = center\n\t\t\t\t\t\t? radius *\n\t\t\t\t\t\t\tcanonicalizeRotation(\n\t\t\t\t\t\t\t\tcanonicalizeRotation(Vec.Angle(center, rightPoint)) -\n\t\t\t\t\t\t\t\t\tcanonicalizeRotation(Vec.Angle(center, leftPoint))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: Vec.Dist(leftPoint, rightPoint)\n\n\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\tarcLength,\n\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\tstart: 'outset',\n\t\t\t\t\t\t\tend: 'outset',\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\td={\n\t\t\t\t\t\t\t\tcenter\n\t\t\t\t\t\t\t\t\t? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}`\n\t\t\t\t\t\t\t\t\t: `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</g>\n\t\t</>\n\t)\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBE;AAxBF,oBAAiE;AACjE,YAAuB;AACvB,uBAAgD;AAChD,iCAAoC;AACpC,0BAA2C;AAEpC,MAAM,iBAAiB,MAAM,KAAK,SAAS,iBAAiB;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAGG;AACF,QAAM,YAAQ,uCAAqB;AACnC,QAAM,gBAAY,kCAAa,GAAG,GAAG,IAAI,IAAI;AAC7C,QAAM,WAAO,kCAAa,GAAG,GAAG,IAAI,IAAI;AAExC,SACC,4EACC;AAAA,gDAAC,8BAAU,OAAc,GAAG,WAAW,MAAY,OAAc;AAAA,IACjE,4CAAC,OAAE,aAA0B,QAAQ,MAAM,KAAK,EAAE,OAAO,MAAK,QAAO,eAAc,OACjF,eAAK,IAAI,CAAC,EAAE,WAAW,YAAY,QAAQ,OAAO,GAAG,MAAM;AAC3D,YAAM,YAAY,SACf,aACD;AAAA,YACC,oCAAqB,kBAAI,MAAM,QAAQ,UAAU,CAAC,QACjD,oCAAqB,kBAAI,MAAM,QAAQ,SAAS,CAAC;AAAA,MACnD,IACC,kBAAI,KAAK,WAAW,UAAU;AAEjC,YAAM,EAAE,iBAAiB,iBAAiB,QAAI;AAAA,QAC7C;AAAA,QACA;AAAA,QACA;AAAA,UACC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,KAAK;AAAA,QACN;AAAA,MACD;AAEA,aACC;AAAA,QAAC;AAAA;AAAA,UAEA,GACC,SACG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,MAAM,IAAI,MAAM,UAAU,WAAW,CAAC,IAAI,WAAW,CAAC,KACxF,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,IAAI,WAAW,CAAC;AAAA,UAElE;AAAA,UACA;AAAA;AAAA,QAPK;AAAA,MAQN;AAAA,IAEF,CAAC,GACF;AAAA,KACD;AAEF,CAAC;",
  "names": []
}
